{"version":3,"sources":["css/NavBarStyle.jsx","components/Bar.jsx","css/HomeStyle.jsx","pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["navbar","background","nameStyle","fontFamily","fontSize","color","flexGrow","buttonStyle","Bar","AppBar","position","style","styles","Toolbar","to","textDecoration","Button","Typography","align","bodyStyle","justifyContent","headerStyle","display","textStyle","textAlign","maxWidth","marginLeft","marginRight","experienceStyle","Home","href","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAAaA,EAAS,CAClBC,WAAY,kBAGHC,EAAY,CACrBC,WAAY,gBACZC,SAAU,OACVC,MAAO,UACPC,SAAU,KAGDC,EAAc,CACvBJ,WAAY,iBCSDK,MAhBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAOC,GAC7B,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,IAAIH,MAAO,CAACI,eAAgB,SACjC,kBAACC,EAAA,EAAD,CAAQL,MAAOC,GAAf,SAGJ,kBAACK,EAAA,EAAD,CAAYN,MAAOC,EAAkBM,MAAM,SAA3C,sBCbHC,EAAY,CACrBhB,WAAY,gBACZiB,eAAgB,UAGPC,EAAc,CACvBC,QAAS,OACTF,eAAgB,SAChBhB,SAAU,QAGDmB,EAAY,CACrBnB,SAAU,OACVoB,UAAW,SACXC,SAAU,MACVC,WAAY,OACZC,YAAa,QAGJC,EAAkB,CAC3BF,WAAY,OC8BDG,MA7Cf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kDACA,0BAAMlB,MAAOC,GACT,6BACG,wBAAID,MAAOC,GAAX,mBAEC,uBAAGD,MAAOC,GAAV,wJAMJ,yBAAKD,MAAOC,GACR,0CACA,4BACI,4BAAI,uDAAoC,kDACpC,iEACA,4BACI,yCAAc,uBAAGkB,KAAK,uCAAR,sCAAd,iBAGA,wDAA6B,uBAAGA,KAAK,gDAAR,gDAA7B,kBAIR,6BAAK,6BAEL,4BAAI,2EAAwD,kDACxD,8CACA,4BACI,oHACA,4FC3BjBC,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAU,kBAAM,kBAAC,EAAD,WCKxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.531fdcce.chunk.js","sourcesContent":["export const navbar = {\n    background: 'BlanchedAlmond',\n}\n  \nexport const nameStyle = {\n    fontFamily: 'Didact Gothic',\n    fontSize: '30px',\n    color: 'DimGrey',\n    flexGrow: '1'\n}\n\nexport const buttonStyle = {\n    fontFamily: 'Didact Gothic'\n}\n\nexport const menuStyle = {\n    fill: 'DimGrey'\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {AppBar, Toolbar, Typography, Button} from '@material-ui/core';\nimport * as styles from '../css/NavBarStyle';\n\nfunction Bar () {\n    return (\n        <AppBar position=\"static\" style={styles.navbar}>\n            <Toolbar>\n                <Link to='/' style={{textDecoration: 'none'}}>\n                    <Button style={styles.buttonStyle}>Home</Button>\n                </Link>\n\n                <Typography style={styles.nameStyle} align='right'>\n                    Aneesha Sampath\n                </Typography>\n            </Toolbar>\n      </AppBar>\n    )\n}\n\nexport default Bar;","export const bodyStyle = {\n    fontFamily: 'Didact Gothic',\n    justifyContent: 'center'\n}\n\nexport const headerStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    fontSize: '40px'\n}\n\nexport const textStyle = {\n    fontSize: '16px',\n    textAlign: 'center',\n    maxWidth: '50%',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n}\n\nexport const experienceStyle = {\n    marginLeft: '10%'\n}","import React from 'react';\nimport Bar from '../components/Bar';\n\nimport * as styles from '../css/HomeStyle';\n\nfunction Home () {\n    return (\n        <div>\n            <Bar/>\n            <title>Aneesha Sampath</title>\n            <body style={styles.bodyStyle}>\n                <div>\n                   <h1 style={styles.headerStyle}>Aneesha Sampath</h1>\n\n                    <p style={styles.textStyle}>\n                        Hi there! I am Aneesha, an Artificial Intelligence and Computer Science student\n                        at Carnegie Mellon University intending to graduate in May of 2023. \n                    </p> \n                </div>\n\n                <div style={styles.experienceStyle}>\n                    <h3>Experience</h3>\n                    <ul>\n                        <li><strong>Google, Inc. &emsp;</strong><i>May - August, 2020</i></li>\n                            <p>Software Engineering (STEP) Intern</p>\n                            <ul>\n                                <li>Developed <a href='https://github.com/asam01/step-2020'>personal portfolio web application\n                                    </a> from scratch</li>\n\n                                <li>Designed and implemented <a href='https://github.com/googleinterns/step59-2020'>\n                                    Stock Market Simulation Game web application</a> from scratch</li>\n                                \n                            </ul>\n                        <br/><br/>\n\n                        <li><strong>Carnegie Institution for Science &emsp;</strong><i>May - August, 2018</i></li>\n                            <p>Research Intern</p>\n                            <ul>\n                                <li>Wrote Python scripts to animate evolution and plot aspects of Earth's magnetic field</li>\n                                <li>Rendered 3D models and 3D animations of magnetic field</li>\n                            </ul>\n                    </ul>\n                </div>\n                \n            </body> \n        </div>\n\n    )\n}\n\nexport default Home;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path='/' render = {() => <Home />} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}